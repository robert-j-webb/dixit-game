"use client";

import { useEffect, useState } from "react";
import { useAtomValue, useSetAtom } from "jotai";
import { Card } from "@/components/ui/card";
import { Loader2, Sparkles } from "lucide-react";
import { gameStateAtom, updateGameStateAtom } from "@/components/game-state";

const AI_MODELS = [
  "FLUX.1 [dev]",
  "Stable Diffusion XL",
  "Midjourney Style",
  "DALL-E Style",
];

export function ImageGeneration() {
  const gameState = useAtomValue(gameStateAtom);
  const updateGameState = useSetAtom(updateGameStateAtom);
  const [currentStep, setCurrentStep] = useState(0);
  const [generatedImages, setGeneratedImages] = useState<
    Array<{ url: string; model: string; score?: number }>
  >([]);

  useEffect(() => {
    const generateImages = async () => {
      updateGameState({ isLoading: true });

      // Simulate image generation process
      for (let i = 0; i < AI_MODELS.length; i++) {
        setCurrentStep(i + 1);

        // Simulate API call delay
        await new Promise((resolve) => setTimeout(resolve, 2000));

        const imageUrl = `/placeholder.svg?height=400&width=400&query=${encodeURIComponent(
          `${gameState.userPrompt} in ${AI_MODELS[i]} style`,
        )}`;

        setGeneratedImages((prev) => [
          ...prev,
          {
            url: imageUrl,
            model: AI_MODELS[i],
          },
        ]);
      }

      // Simulate AI evaluation
      setCurrentStep(5);
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // Add random scores
      const imagesWithScores = generatedImages.map((img) => ({
        ...img,
        score: Math.floor(Math.random() * 30) + 70, // Scores between 70-100
      }));

      updateGameState({
        generatedImages: imagesWithScores,
        isLoading: false,
        step: "results",
      });
    };

    generateImages();
  }, [gameState.userPrompt, updateGameState]);

  const getStepMessage = () => {
    if (currentStep <= AI_MODELS.length) {
      return `Generating with ${AI_MODELS[currentStep - 1]}...`;
    }
    return "AI is evaluating your creations...";
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-amber-800 mb-2 font-sans">
          AI Creates Your Vision
        </h2>
        <p className="text-amber-700">
          Multiple AI models are interpreting your prompt
        </p>
      </div>

      {/* Progress Indicator */}
      <Card className="p-6 bg-gradient-to-r from-amber-50 to-yellow-50 border-amber-200">
        <div className="text-center space-y-4">
          <Sparkles className="h-12 w-12 mx-auto text-amber-600 animate-pulse" />
          <div>
            <p className="text-lg font-medium text-amber-800">
              {getStepMessage()}
            </p>
            <p className="text-sm text-amber-600">
              Step {currentStep} of {AI_MODELS.length + 1}
            </p>
          </div>
          <div className="flex justify-center">
            <Loader2 className="h-6 w-6 animate-spin text-amber-600" />
          </div>
        </div>
      </Card>

      {/* Your Prompt */}
      <Card className="p-4 bg-white border-amber-200">
        <h3 className="font-medium text-amber-800 mb-2">
          Your Creative Prompt:
        </h3>
        <p className="text-amber-700 italic">"{gameState.userPrompt}"</p>
      </Card>

      {/* Generated Images Preview */}
      {generatedImages.length > 0 && (
        <div className="grid grid-cols-2 gap-4">
          {generatedImages.map((image, index) => (
            <Card key={index} className="p-3 border-amber-200">
              <img
                src={image.url || "/placeholder.svg"}
                alt={`Generated by ${image.model}`}
                className="w-full h-32 object-cover rounded mb-2"
              />
              <p className="text-xs text-center text-amber-700 font-medium">
                {image.model}
              </p>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}
